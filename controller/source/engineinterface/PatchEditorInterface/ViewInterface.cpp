/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class Jni_View */
#include "stdafx.h"
#include "interfacetypes.h"
#include "viewquestion.h"


/*
 * Class:     Jni_View
 * Method:    GetNumViews
 * Signature: (II)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_GetNumViews
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch)
{
  return ViewQuestion::GetNumViews((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch);
}

/*
 * Class:     Jni_View
 * Method:    GetNumViewObjects
 * Signature: (III)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_GetNumViewObjects
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index)
{
  return  ViewQuestion::GetNumViewObjects((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index);
}

/*
 * Class:     Jni_View
 * Method:    GetViewObject
 * Signature: (IIII)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_GetViewObject
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index, jint object_index)
{
return  ViewQuestion::GetViewObject((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, object_index).Key();
}

/*
 * Class:     Jni_View
 * Method:    GetViewObjectDisplayParams
 * Signature: (IIIII)Z
 * We must use a Java class object because six parameters are returned.
 * These parameters are stored in the Java object
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_View_GetViewObjectDisplayParams
  (JNIEnv *env, jobject view_object, jint pQuestion, jint dwpPatch, jint view_index, jint object_index)
{

  bool ret = false;
  unsigned top, left, height, width, tag, dwpShell;
  P_BASESHELL pShell;

  struct str_fields
  {
    str_fields (const char* id, unsigned &val):field_id(id), field_val(val){}
    const char* field_id;
    const unsigned &field_val;
  };

  const unsigned num_fields = 5;
  str_fields fields [num_fields] =
  {
    str_fields ("top", top),
    str_fields ("left", left),
    str_fields ("height", height),
    str_fields ("width", width),
    str_fields ("dwpShell", dwpShell)
  };

  if (ViewQuestion::GetViewObjectDisplayParams((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, object_index, &pShell, &top, &left, &height, &width, &tag))
  {
    dwpShell = pShell.Key();
    // now copy parameters into Java Class Object
    jclass Jni_View_class = env->GetObjectClass(view_object);

    // now fill in all the fields
    for (unsigned i = 0; i < num_fields; i++)
    {
      jfieldID field_id = env->GetFieldID (Jni_View_class, fields[i].field_id, "I");
      env->SetIntField(view_object, field_id, fields[i].field_val);
    }
    ret = true;

  }

  return ret;
}

/*
 * Class:     Jni_View
 * Method:    AddViewObject
 * Signature: (IIIIIIIII)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_View_AddViewObject
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index, jint pShell, jint top, jint left, jint height, jint width, jint tag)
{
  return ViewQuestion::AddViewObject((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, pShell, top, left, height, width, tag);
}

/*
 * Class:     Jni_View
 * Method:    ClearView
 * Signature: (III)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_View_ClearView
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index)
{
  return ViewQuestion::ClearView((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index);
}

/*
 * Class:     Jni_View
 * Method:    GetViewName
 * Signature: (III)Ljava/lang/String;
 */
extern "C" JNIEXPORT jstring JNICALL Java_Jni_View_GetViewName
  (JNIEnv *env, jclass, jint pQuestion, jint dwpPatch, jint view_index)
{
  char buf [128];

  if (ViewQuestion::GetViewName((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, buf, sizeof(buf)))
  {
    return env->NewStringUTF(buf);
  }
  else
  {
    return 0;
  }
}

/*
 * Class:     Jni_View
 * Method:    SetViewName
 * Signature: (IIILjava/lang/String;)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_View_SetViewName
  (JNIEnv *env, jclass, jint pQuestion, jint dwpPatch, jint view_index, jstring new_name)
{
  const char* name = env->GetStringUTFChars(new_name, NULL);

  return ViewQuestion::SetViewName((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, name);

}

/*
 * Class:     Jni_View
 * Method:    ModifyViewObject
 * Signature: (IIIIIIIII)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_View_ModifyViewObject
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index, jint pShell, jint top, jint left, jint height, jint width, jint tag)
{
  return ViewQuestion::ModifyViewObject((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, pShell, top, left, height, width, tag);
}
/*
 * Class:     Jni_View
 * Method:    AddView
 * Signature: (II)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_AddView
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch)
{
  return ViewQuestion::AddView((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch);
}

/*
 * Class:     Jni_View
 * Method:    DeleteView
 * Signature: (III)V
 */
extern "C" JNIEXPORT void JNICALL Java_Jni_View_DeleteView
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index)
{
  ViewQuestion::DeleteView((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index);
}

/*
 * Class:     Jni_View
 * Method:    AddViewConnector
 * Signature: (IIII)Z
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_AddViewConnector
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index, jint pCon)
{
  return ViewQuestion::AddViewConnector((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, pCon);
}

/*
 * Class:     Jni_View
 * Method:    GetNumViewConnectors
 * Signature: (III)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_GetNumViewConnectors
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index)
{
  return  ViewQuestion::GetNumViewConnectors((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index);
}


/*
 * Class:     Jni_View
 * Method:    GetViewConnector
 * Signature: (IIII)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_GetViewConnector
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index, jint object_index)
{
  return  ViewQuestion::GetViewConnector((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, object_index).Key();

}

/*
 * Class:     Jni_View
 * Method:    GetViewConnectorValue
 * Signature: (IIIII)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_GetViewConnectorValue
  (JNIEnv *, jclass, int pQuestion, jint dwpPatch, jint view_index, jint object_index, jint value_index)
{
  return  ViewQuestion::GetViewConnectorValue((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, object_index, value_index);
}

/*
 * Class:     Jni_View
 * Method:    GetNumViewConnectorValues
 * Signature: (IIII)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_View_GetNumViewConnectorValues
  (JNIEnv *, jclass, jint pQuestion, jint dwpPatch, jint view_index, jint object_index)
{
  return  ViewQuestion::GetNumViewConnectorValues((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, object_index);

}

/*
 * Class:     Jni_View
 * Method:    AddViewConnectorValue
 * Signature: (IIIII)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_View_AddViewConnectorValue
  (JNIEnv *, jclass, int pQuestion, jint dwpPatch, jint view_index, jint object_index, jint new_value)
{
  return  ViewQuestion::AddViewConnectorValue((PresentationQuestion*) pQuestion, 	// Pointer to the Presentation Question used to get the
      	// answer
      (P_PATCH) dwpPatch, view_index, object_index, new_value);
}


