/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include "stdafx.h"
#include "smutility.h"
#include "filequestion.h"
#include <sys/stat.h>
#include "crc32.h"

#include "presentationquestion.h"

/* Header for class Jni_FileSend */

/*
 * Class:     Jni_FileSend
 * Method:    SendFile
 * Signature: (IILjava/lang/String;)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_FileSend_SendFile
  (JNIEnv * env, jclass, jint presentation, jstring jfile_name, jstring jSource_file_name)
{
  bool ret = false;
  PresentationQuestion* pQuestion = getPresentation (presentation);
  const char* filename = env->GetStringUTFChars(jfile_name, NULL);
  const char* source_filename = env->GetStringUTFChars(jSource_file_name, NULL);

  const unsigned key = 0;

  FileQuestion::OpenFileForWrite(pQuestion, key, filename);

  struct stat statbuf;
  FILE* in_file = fopen(source_filename, "r+b");

  if (in_file)
  {
    unsigned block_num = 0;
    unsigned total_read = 0;

    fstat(fileno(in_file), &statbuf);

    printf ("Opened file %s of %lld bytes\r\n", filename, statbuf.st_size);

    BYTE data_buf [64];

    unsigned bytes_read = fread(data_buf, 1, sizeof(data_buf), in_file);
    double last_displayed = 0;

    printf ("Percent complete %u%%", 0);
    while (bytes_read)
    {
      if (last_displayed < 100)
      {
        printf ("\b\b");
        if (last_displayed >= 10)
        {
          printf ("\b");
        }
      }

      FileQuestion::WriteBytes(pQuestion, key, block_num, bytes_read, data_buf);

      total_read += bytes_read;

      last_displayed = total_read;
      last_displayed /=  statbuf.st_size;
      last_displayed *= 100;
      unsigned disp_out = (unsigned)last_displayed;

      //printf ("Read %u of %u complete %u\%\r\n", total_read, statbuf.st_size, disp_out);
      printf ("%u%%", disp_out);
      fflush (stdout);
      bytes_read = fread(data_buf, 1, sizeof(data_buf), in_file);
      block_num++;
    }

    printf ("\r\nSend %s complete \r\n", filename);
    fclose(in_file);
    ret = true;
  }

  FileQuestion::CloseFile(pQuestion, key);

  return ret;
}


/*
 * Class:     Jni_FileSend
 * Method:    SaveNVRAM
 * Signature: (I)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_FileSend_SaveNVRAM
  (JNIEnv *, jclass, jint presentation)
{
  FileQuestion::SaveNVRAM(getPresentation (presentation));
  return 0;
}

/*
 * Class:     Jni_FileSend
 * Method:    EraseNVRAM
 * Signature: (I)I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_FileSend_EraseNVRAM
  (JNIEnv *, jclass, jint presentation)
{
  FileQuestion::EraseNVRAM(getPresentation (presentation));
  return 0;
}

/*
 * Class:     Jni_FileSend
 * Method:    SendFile
 * Signature: (IILjava/lang/String;)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_FileSend_SaveToIde
  (JNIEnv * env, jclass, jint presentation, jstring jfile_name, jstring jSource_file_name)
{
  bool ret = false;
  PresentationQuestion* pQuestion = getPresentation (presentation);
  const char* filename = env->GetStringUTFChars(jfile_name, NULL);
  const char* source_filename = env->GetStringUTFChars(jSource_file_name, NULL);

  unsigned long crc = crc_file (source_filename);

  FileQuestion::SaveFileToDisk(pQuestion, crc, filename);

  return ret;
}

