 /* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#define _NO_CODE
typedef unsigned char byte;

/* Header for class Midi */
#include "iodata.h"
#include "midicfg.h"

#include "midicontrollerlibrary.h"

// define field names for Midi Config
#define FIELD_MIDI_MESSAGE "midi_message"
#define FIELD_MIDI_CHANNEL "midi_channel"
#define FIELD_DATA_1        "data_1"
#define FIELD_DATA_2        "data_2"
#define FIELD_DATA_1_VARY   "data1_vary"
#define FIELD_MUTE          "mute"
#define FIELD_INVERT        "invert"
#define FIELD_OUT_2         "midi_out2"
#define FIELD_GEN_INIT      "generate_initial"

void WriteIntField(JNIEnv *env, jclass config_class, jobject config, const char* field_name, int value)
{
  jfieldID field_id = env->GetFieldID (config_class, field_name, "I");
  env->SetIntField(config, field_id, value);
}

void WriteBoolField(JNIEnv *env, jclass config_class, jobject config, const char* field_name, bool value)
{
  jfieldID field_id = env->GetFieldID (config_class, field_name, "Z");
  env->SetBooleanField(config, field_id, value);
}

int ReadIntField(JNIEnv *env, jclass config_class, jobject config, const char* field_name)
{
  jfieldID field_id = env->GetFieldID (config_class, field_name, "I");
  return env->GetIntField(config, field_id);
}

bool ReadBoolField(JNIEnv *env, jclass config_class, jobject config, const char* field_name)
{
  jfieldID field_id = env->GetFieldID (config_class, field_name, "Z");
  return env->GetBooleanField(config, field_id);
}

/*
 * Class:     Midi
 * Method:    Initialise
 * Signature: ()V
 */
extern "C" JNIEXPORT void JNICALL Java_Midi_Initialise
  (JNIEnv *, jclass)
{
  InitialisePatchEditor();
}

/*
 * Class:     Midi
 * Method:    DeInitialisePatchEditor
 * Signature: ()V
 */
extern "C" JNIEXPORT void JNICALL Java_Midi_DeInitialisePatchEditor
  (JNIEnv *, jclass)
{
  DeInitialisePatchEditor();
}

/*
 * Class:     Midi
 * Method:    ConfigChanged
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_ConfigChanged
  (JNIEnv *, jclass)
{
  return ConfigChanged();
}

/*
 * Class:     Midi
 * Method:    SetReferenceData
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_SetReferenceData
  (JNIEnv *, jclass)
  {
    SetReferenceData();
    return true;
  }

/*
 * Class:     Midi
 * Method:    LoadConfig
 * Signature: (Ljava/lang/String;)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_LoadConfig
  (JNIEnv *env, jclass, jstring j_filename)
{
  const char* filename = env->GetStringUTFChars(j_filename, NULL);
  return LoadConfig(filename);
}

/*
 * Class:     Midi
 * Method:    SaveConfig
 * Signature: (Ljava/lang/String;)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_SaveConfig
  (JNIEnv *env, jclass, jstring j_filename)
{

  const char* filename = env->GetStringUTFChars(j_filename, NULL);
  return SaveConfig(filename);
}

/*
 * Class:     Midi
 * Method:    SendFactoryDefault
 * Signature: (I)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_SendFactoryDefault
  (JNIEnv *, jclass)
{
    return SendFactoryDefault();
}


/*
 * Class:     Midi
 * Method:    SendReadConfig
 * Signature: (I)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_SendReadConfig
  (JNIEnv *, jclass)
{
  return SendReadConfig();
}

/*
 * Class:     Midi
 * Method:    CancelWrite
 * Signature: ()V
 */
extern "C" JNIEXPORT void JNICALL Java_Midi_CancelWrite
  (JNIEnv *, jclass)
{
  CancelWrite();
}

/*
 * Class:     Midi
 * Method:    SetOutputDevice
 * Signature: (I)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_SetOutputDevice
  (JNIEnv *, jclass, jint device)
{
  return SetOutputDevice (device);
}

/*
 * Class:     Midi
 * Method:    SetInputDevice
 * Signature: (I)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_SetInputDevice
  (JNIEnv *, jclass, jint device)
{
  return SetIntputDevice (device);
}

extern "C" JNIEXPORT jint JNICALL Java_Midi_NumInputDevice
  (JNIEnv *, jclass)
{
   return GetNumMidiInDevices();
}

/*
 * Class:     Midi
 * Method:    NumOutputDevice
 * Signature: ()I
 */
extern "C" JNIEXPORT jint JNICALL Java_Midi_NumOutputDevice
  (JNIEnv *, jclass)
{
  return GetNumMidiOutDevices();
}

/*
 * Class:     Midi
 * Method:    GetInputDeviceName
 * Signature: (Ljava/lang/String;)Z
 */
extern "C" JNIEXPORT jstring JNICALL Java_Midi_GetInputDeviceName
  (JNIEnv *env, jclass, jint index)
{
  char buf [256];
  jstring ret = 0;

  if (GetMidiInputName (index,  buf,  sizeof(buf)))
  {
    ret = env->NewStringUTF(buf);
  }

  return ret;
}

/*
 * Class:     Midi
 * Method:    GetOutputDeviceName
 * Signature: (Ljava/lang/String;)Z
 */
extern "C" JNIEXPORT jstring JNICALL Java_Midi_GetOutputDeviceName
  (JNIEnv *env, jclass, jint index)
{
  char buf [256];
  jstring ret = 0;

  if (GetMidiOutputName (index,  buf,  sizeof(buf)))
  {
    ret = env->NewStringUTF(buf);
  }

  return ret;
}

extern "C" JNIEXPORT void JNICALL Java_MidiConfig_GetMidiConfig
  (JNIEnv *env, jobject config, jint index)
{
  //unsigned config_index = index * 4 ;

  if (index < 64)
  {
    str_midiconfig midi_config;
    ReadMidiConfig (&midi_config, (byte)index);

    // now copy parameters into Java Class Object
    jclass config_class = env->GetObjectClass(config);
    int status = midi_config.status_chan / 16 - 8;
    int channel =  midi_config.status_chan & 0x0f;

    WriteIntField(env, config_class, config, FIELD_MIDI_MESSAGE, status);
    WriteIntField(env, config_class, config, FIELD_MIDI_CHANNEL, channel);
    WriteIntField(env, config_class, config, FIELD_DATA_1, midi_config.data_1);
    WriteIntField(env, config_class, config, FIELD_DATA_2, midi_config.data_2);

    byte flags = midi_config.config_flag;
    bool data_1_vary = flags & DATA_1_VARY_MASK;
    bool mute = flags & MUTE_CONFIG_MASK;
    bool invert = flags & INVERT_VALUE_MASK;
    bool midi_out2 = flags & MIDI_OUTPUT2_MASK;
    bool generate_initial = flags & PRESET_VALUE_FLAG;

    WriteBoolField(env, config_class, config, FIELD_DATA_1_VARY, data_1_vary);
    WriteBoolField(env, config_class, config, FIELD_MUTE, mute);
    WriteBoolField(env, config_class, config, FIELD_INVERT, invert);
    WriteBoolField(env, config_class, config, FIELD_OUT_2, midi_out2);
    WriteBoolField(env, config_class, config, FIELD_GEN_INIT, generate_initial);

  }

}

extern "C" JNIEXPORT void JNICALL Java_MidiConfig_SetMidiConfig
  (JNIEnv *env, jobject config, jint index)
{
  //unsigned config_index = index * 4 ;

  if (index < 64)
  {
    str_midiconfig midi_config;

    // now copy parameters into Java Class Object
    jclass config_class = env->GetObjectClass(config);

    byte status, channel;

    status = (byte)((ReadIntField(env, config_class, config, FIELD_MIDI_MESSAGE) + 8) * 0x10);
    channel = (byte) (ReadIntField(env, config_class, config, FIELD_MIDI_CHANNEL));
    midi_config.status_chan = (byte) (status +  channel);

    midi_config.data_1 = (byte) ReadIntField(env, config_class, config, FIELD_DATA_1);
    midi_config.data_2 = (byte) ReadIntField(env, config_class, config, FIELD_DATA_2);

    midi_config.config_flag = 0x0;

    if (ReadBoolField(env, config_class, config, FIELD_DATA_1_VARY))
      midi_config.config_flag |= DATA_1_VARY_MASK;

    if (ReadBoolField(env, config_class, config, FIELD_MUTE))
      midi_config.config_flag |= MUTE_CONFIG_MASK;

    if (ReadBoolField(env, config_class, config, FIELD_INVERT))
      midi_config.config_flag |= INVERT_VALUE_MASK;

    if (ReadBoolField(env, config_class, config, FIELD_OUT_2))
      midi_config.config_flag |= MIDI_OUTPUT2_MASK;

    if (ReadBoolField(env, config_class, config, FIELD_GEN_INIT))
      midi_config.config_flag |= PRESET_VALUE_FLAG;

    WriteMidiConfig(&midi_config, (byte) index);
  }

}

extern "C" JNIEXPORT void JNICALL Java_Midi_SetMidiMerge
  (JNIEnv *, jclass, jboolean merge)
{
  if (merge)
  {
    WriteConfigByte (MIDI_MERGE_ADDRESS, 0xff);
  }
  else
  {
    WriteConfigByte (MIDI_MERGE_ADDRESS, 0x0);
  }
}

/*
 * Class:     Midi
 * Method:    GetMidiMerge
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Midi_GetMidiMerge
  (JNIEnv *, jclass)
{
  return (ReadConfigByte (MIDI_MERGE_ADDRESS));
}

extern "C" JNIEXPORT void JNICALL Java_Midi_SendConfig
  (JNIEnv *, jclass)
{
  SendConfig();
}

extern "C" JNIEXPORT jboolean JNICALL Java_MidiMessage_GetMidiMessage
  (JNIEnv *env, jobject midi_message)
{
  MidiData ret_data;

  bool ret = GetMidiData(&ret_data);

  if (ret)
  {
    jclass message_class = env->GetObjectClass(midi_message);
    int status = ret_data.status / 16 - 8;
    int channel =  ret_data.status & 0x0f;

    WriteIntField(env, message_class, midi_message, FIELD_MIDI_MESSAGE, status);
    WriteIntField(env, message_class, midi_message, FIELD_MIDI_CHANNEL, channel);
    WriteIntField(env, message_class, midi_message, FIELD_DATA_1, ret_data.data1);
    WriteIntField(env, message_class, midi_message, FIELD_DATA_2, ret_data.data2);
  }

  return ret;
}

/*
 * Class:     MidiMessage
 * Method:    SetMidiMessage
 * Signature: ()V
 */
extern "C" JNIEXPORT jboolean JNICALL Java_MidiMessage_SetMidiMessage
  (JNIEnv *env, jobject midi_message)
{

  MidiData data;

  // now copy parameters into Java Class Object
  jclass message_class = env->GetObjectClass(midi_message);

  byte status, channel;

  status = (byte)((ReadIntField(env, message_class, midi_message, FIELD_MIDI_MESSAGE) + 8) * 0x10);
  channel = (byte) (ReadIntField(env, message_class, midi_message, FIELD_MIDI_CHANNEL));
  data.status = (byte) (status +  channel);

  data.data1 = (byte) ReadIntField(env, message_class, midi_message, FIELD_DATA_1);
  data.data2 = (byte) ReadIntField(env, message_class, midi_message, FIELD_DATA_2);

  return SendMidiData(data);
}

extern "C" JNIEXPORT jint JNICALL Java_Midi_GetBytesRead
  (JNIEnv *, jclass)
{
  return GetBytesWritten();
}

