//## begin module%3A9C90C202A8.cm preserve=no
//	  %X% %Q% %Z% %W%
//## end module%3A9C90C202A8.cm

//## begin module%3A9C90C202A8.cp preserve=no
//	Angelo Fraietta
//## end module%3A9C90C202A8.cp

//## Module: BaseShellQuestion%3A9C90C202A8; Package body
//	Contains the header information for obtaining Answers to
//	BaseShells.  Module has been added as this Module body
//	contains class definitions
//## Subsystem: engineinterface%3A9C858C00CB
//	c:\develop\smartcontroller\controller\source\engineinterf
//	ace
//## Source file: c:\develop\smartcontroller\controller\source\engineinterface\baseshellquestion.cpp

//## begin module%3A9C90C202A8.additionalIncludes preserve=no
#include "stdafx.h"
#include "control.h"
//## end module%3A9C90C202A8.additionalIncludes

//## begin module%3A9C90C202A8.includes preserve=yes
#include "smutility.h"
#include "typedefs.h"
#include "interfacetypes.h"

//## end module%3A9C90C202A8.includes

// BaseShellAnswer
#include "baseshellanswer.h"
// PresentationQuestion
#include "presentationquestion.h"
// BaseShellQuestion
#include "baseshellquestion.h"
// PresentationAnswer
#include "presentationanswer.h"


//## begin module%3A9C90C202A8.declarations preserve=no
//## end module%3A9C90C202A8.declarations

//## begin module%3A9C90C202A8.additionalDeclarations preserve=yes
//## end module%3A9C90C202A8.additionalDeclarations


// Class Utility BaseShellQuestion 


//## Other Operations (implementation)
//## Operation: GetNumAttributes%986253860
//	Gets the number of attributes for the P_BASESHELL
//	parameter.  The  Number of Attributes is returned as
//	parameter
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
unsigned BaseShellQuestion::GetNumAttributes (PresentationQuestion* pQuestion, P_BASESHELL objKey)
{
  //## begin BaseShellQuestion::GetNumAttributes%986253860.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL); // pBaseShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetNumAttributes, cursor);
	objKey.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;

  //## end BaseShellQuestion::GetNumAttributes%986253860.body
}

//## Operation: GetAttributeName%986253861
//	Gets the name of the attribute defininded by the P_
//	BASESHELL and index  parameters.  The  Attribute name is
//	returned as parameters
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
void BaseShellQuestion::GetAttributeName (PresentationQuestion* pQuestion, P_BASESHELL objKey, unsigned attribute_key, char* ret_value, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetAttributeName%986253861.body preserve=yes
	const unsigned question_size =  SMUtility::TargetFuncBufSize() // Target Function index
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); // attribute key

	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE* answer  = (BYTE*) ret_value;

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetAttributeName, cursor);
	cursor = objKey.toBuf(cursor);
	SMUtility::IntToBuf((short)attribute_key, cursor);


	//get the answer
	if(!pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, buf_len))
		{
			// it failed
			ret_value [0] = '\0';
		}
	delete [] question;
  //## end BaseShellQuestion::GetAttributeName%986253861.body
}

//## Operation: GetAttribute%986253853
//	Gets the Attribute defininded by the P_BaseShell and
//	index  parameters.  The Attribute value is returned as a
//	parameter. Function returns true if the Attribute is
//	valid
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
bool BaseShellQuestion::GetAttribute (PresentationQuestion* pQuestion, P_BASESHELL objKey, unsigned attribute_key, char* ret_value, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetAttribute%986253853.body preserve=yes
	bool success;
	const unsigned question_size = SMUtility::TargetFuncBufSize() // Target Function index
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); // attribute key
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE* answer  = (BYTE*) ret_value; 


	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetAttribute, cursor);
	cursor = objKey.toBuf(cursor);
	SMUtility::IntToBuf((short)attribute_key, cursor);

	//get the answer
	success = pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, buf_len);

	delete[] question;
	return success;
  //## end BaseShellQuestion::GetAttribute%986253853.body
}

//## Operation: SetAttribute%986253854
//	Sets the Attribute defininded by the P_BASESHELL and
//	index  parameters.  Function returns true if the
//	Attribute has been set.
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
//	new_value
bool BaseShellQuestion::SetAttribute (PresentationQuestion* pQuestion, P_BASESHELL objKey, unsigned attribute_key, const char* new_value)
{
  //## begin BaseShellQuestion::SetAttribute%986253854.body preserve=yes
	bool ret = false;
	
	const unsigned question_size = SMUtility::TargetFuncBufSize() // eSetAttribute 
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short) // attribute key
		+ strlen (new_value) + 1; // new value buffer

	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;

	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eSetAttribute, cursor);
	cursor = objKey.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)attribute_key, cursor);
	SMUtility::StrToBuf (new_value, cursor);

	//get the answer 
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = (SMUtility::BufToInt (&a_cursor)); // convert answer
		}

	delete [] question;
	return ret;
  //## end BaseShellQuestion::SetAttribute%986253854.body
}

//## Operation: GetNumResetAttributes%996206541
//	Gets the number of attributes for the P_BASESHELL
//	parameter.  The  Number of Attributes is returned as
//	parameter
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
unsigned BaseShellQuestion::GetNumResetAttributes (PresentationQuestion* pQuestion, P_BASESHELL objKey)
{
  //## begin BaseShellQuestion::GetNumResetAttributes%996206541.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL); // pBaseShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetNumResetAttributes, cursor);
	objKey.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;

  //## end BaseShellQuestion::GetNumResetAttributes%996206541.body
}

//## Operation: GetResetAttributeName%996206542
//	Gets the name of the attribute defininded by the P_
//	BASESHELL and index  parameters.  The  Attribute name is
//	returned as parameters
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
void BaseShellQuestion::GetResetAttributeName (PresentationQuestion* pQuestion, P_BASESHELL objKey, unsigned attribute_key, char* ret_value, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetResetAttributeName%996206542.body preserve=yes

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // Target Function index
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); // attribute key
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE* answer  = (BYTE*) ret_value; 

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetResetAttributeName, cursor);
	cursor = objKey.toBuf(cursor);
	SMUtility::IntToBuf((short)attribute_key, cursor);


	//get the answer
	if(!pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, buf_len))
		{
			// it failed
			ret_value [0] = '\0'; 
		}
	delete [] question;

  //## end BaseShellQuestion::GetResetAttributeName%996206542.body
}

//## Operation: GetResetAttribute%996206543
//	Gets the Attribute defininded by the P_BaseShell and
//	index  parameters.  The Attribute value is returned as a
//	parameter. Function returns true if the Attribute is
//	valid
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
bool BaseShellQuestion::GetResetAttribute (PresentationQuestion* pQuestion, P_BASESHELL objKey, unsigned attribute_key, char* ret_value, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetResetAttribute%996206543.body preserve=yes
	bool success;
	const unsigned question_size = SMUtility::TargetFuncBufSize() // Target Function index
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); // attribute key
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE* answer  = (BYTE*) ret_value; 


	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetResetAttribute, cursor);
	cursor = objKey.toBuf(cursor);
	SMUtility::IntToBuf((short)attribute_key, cursor);

	//get the answer
	success = pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, buf_len);

	delete[] question;
	return success;

  //## end BaseShellQuestion::GetResetAttribute%996206543.body
}

//## Operation: SetResetAttribute%996206544
//	Sets the Attribute defininded by the P_BASESHELL and
//	index  parameters.  Function returns true if the
//	Attribute has been set.
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
//	new_value
bool BaseShellQuestion::SetResetAttribute (PresentationQuestion* pQuestion, P_BASESHELL objKey, unsigned attribute_key, const char* new_value)
{
  //## begin BaseShellQuestion::SetResetAttribute%996206544.body preserve=yes
	bool ret = false;
	
	const unsigned question_size = SMUtility::TargetFuncBufSize() // eSetAttribute 
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short) // attribute key
		+ strlen (new_value) + 1; // new value buffer

	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;

	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eSetResetAttribute, cursor);
	cursor = objKey.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)attribute_key, cursor);
	SMUtility::StrToBuf (new_value, cursor);

	//get the answer 
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = (SMUtility::BufToInt (&a_cursor)); // convert answer
		}

	delete [] question;
	return ret;

  //## end BaseShellQuestion::SetResetAttribute%996206544.body
}

//## Operation: Reset%-626865097; C++
//	Resets the baseshell
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
void BaseShellQuestion::Reset (PresentationQuestion* pQuestion, P_BASESHELL dwpShell)
{
  //## begin BaseShellQuestion::Reset%-626865097.body preserve=yes
	const unsigned question_size = SMUtility::TargetFuncBufSize() // eSetAttribute 
		+ sizeof (P_BASESHELL); // pBaseShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eReset, cursor);
	dwpShell.toBuf(cursor);

	pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, NULL, 0);
	delete [] question;
  //## end BaseShellQuestion::Reset%-626865097.body
}

//## Operation: Send%-2018118597; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
void BaseShellQuestion::Send (PresentationQuestion* pQuestion, P_BASESHELL dwpShell)
{
  //## begin BaseShellQuestion::Send%-2018118597.body preserve=yes
	const unsigned question_size = SMUtility::TargetFuncBufSize() // eSetAttribute 
		+ sizeof (P_BASESHELL); // pBaseShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eSend, cursor);
	dwpShell.toBuf(cursor);

	pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, NULL, 0);
	delete [] question;

  //## end BaseShellQuestion::Send%-2018118597.body
}

//## Operation: Create%-589452350; C++
//## Postconditions:
//	question buf has the parameters as follows
//	type (strlen (type +1)
//	P_PATCH
P_BASESHELL BaseShellQuestion::Create (PresentationQuestion* pQuestion, const char* Type, P_PATCH pParent)
{
  //## begin BaseShellQuestion::Create%-589452350.body preserve=yes
	P_BASESHELL ret;
  const unsigned type_len =  strlen (Type) + 1; // type
	const unsigned question_size = SMUtility::TargetFuncBufSize() 
		+ type_len
		+ sizeof (P_PATCH); // pParent
	const unsigned answer_size = sizeof (P_BASESHELL);
	BYTE* question = new BYTE [question_size];
	BYTE* answer = new BYTE [answer_size];
	BYTE* cursor = question;

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eCreate, cursor);
  memcpy (cursor, Type, type_len);
  cursor += type_len;
	pParent.toBuf(cursor);

	if (pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, answer_size))
		{
			const BYTE* c_answer = answer;
			ret = P_BASESHELL (&c_answer);
		}
	delete [] question;
	delete []answer;

  return ret;


  //## end BaseShellQuestion::Create%-589452350.body
}

//## Operation: GetNumInlets%1308397307; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
unsigned BaseShellQuestion::GetNumInlets (PresentationQuestion* pQuestion, P_BASESHELL dwpShell)
{
  //## begin BaseShellQuestion::GetNumInlets%1308397307.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL); // pBaseShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetNumInlets, cursor);
	dwpShell.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;

  //## end BaseShellQuestion::GetNumInlets%1308397307.body
}

//## Operation: GetNumOutlets%-1922982991; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
unsigned BaseShellQuestion::GetNumOutlets (PresentationQuestion* pQuestion, P_BASESHELL dwpShell)
{
  //## begin BaseShellQuestion::GetNumOutlets%-1922982991.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL); // pBaseShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetNumOutlets, cursor);
	dwpShell.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;
  //## end BaseShellQuestion::GetNumOutlets%-1922982991.body
}

//## Operation: GetInletName%884347129; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	socket_number
void BaseShellQuestion::GetInletName (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum, char* Buf, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetInletName%884347129.body preserve=yes

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // Target Function index
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); // socket nmum
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE* answer  = (BYTE*) Buf; 

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetInletName, cursor);
	cursor = dwpShell.toBuf(cursor);
	SMUtility::IntToBuf((short)wSocketNum, cursor);


	//get the answer
	if(!pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, buf_len))
		{
			// it failed
			Buf [0] = '\0'; 
		}
	delete [] question;

  //## end BaseShellQuestion::GetInletName%884347129.body
}

//## Operation: GetOutletName%1385329752; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	socket_number
void BaseShellQuestion::GetOutletName (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum, char* Buf, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetOutletName%1385329752.body preserve=yes

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // Target Function index
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); // socket nmum
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE* answer  = (BYTE*) Buf; 

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetOutletName, cursor);
	cursor = dwpShell.toBuf(cursor);
	SMUtility::IntToBuf((short)wSocketNum, cursor);


	//get the answer
	if(!pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, buf_len))
		{
			// it failed
			Buf [0] = '\0'; 
		}
	delete [] question;

  //## end BaseShellQuestion::GetOutletName%1385329752.body
}

//## Operation: GetNumInletConnectors%-1254667311; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	socket_number
unsigned BaseShellQuestion::GetNumInletConnectors (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum)
{
  //## begin BaseShellQuestion::GetNumInletConnectors%-1254667311.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); //socketNum
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetNumInletConnectors, cursor);
	cursor = dwpShell.toBuf(cursor);
	SMUtility::IntToBuf((short)wSocketNum, cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;

  //## end BaseShellQuestion::GetNumInletConnectors%-1254667311.body
}

//## Operation: GetNumOutletConnectors%563684372; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	socket_number
unsigned BaseShellQuestion::GetNumOutletConnectors (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum)
{
  //## begin BaseShellQuestion::GetNumOutletConnectors%563684372.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short); //socketNum
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetNumOutletConnectors, cursor);
	cursor = dwpShell.toBuf(cursor);
	SMUtility::IntToBuf((short)wSocketNum, cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;
  //## end BaseShellQuestion::GetNumOutletConnectors%563684372.body
}

//## Operation: CanConnectInlet%-704190606; C++
//## Postconditions:
//	Question Packed as
//
//	P_BASESHELL
//	wSocketNum
//	P_CONNECTOR
bool BaseShellQuestion::CanConnectInlet (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum, P_CONNECTOR dwpCon)
{
  //## begin BaseShellQuestion::CanConnectInlet%-704190606.body preserve=yes
	bool ret = false;

	const unsigned question_size = SMUtility::TargetFuncBufSize() // eSetAttribute
		+ sizeof (P_BASESHELL) // dwppBaseShell
		+ sizeof (short) // wSocketNumber
		+ sizeof (P_CONNECTOR); // dwpCon

	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;

	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eCanConnectInlet, cursor);
	cursor = dwpShell.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)wSocketNum, cursor);
	dwpCon.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = (SMUtility::BufToInt (&a_cursor)); // convert answer
		}

	delete [] question;
	return ret;
  //## end BaseShellQuestion::CanConnectInlet%-704190606.body
}

//## Operation: CanConnectOutlet%890428262; C++
//## Postconditions:
//	Question Packed as
//
//	P_BASESHELL
//	wSocketNum
//	P_CONNECTOR
bool BaseShellQuestion::CanConnectOutlet (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum, P_CONNECTOR dwpCon)
{
  //## begin BaseShellQuestion::CanConnectOutlet%890428262.body preserve=yes
	bool ret = false;

	const unsigned question_size = SMUtility::TargetFuncBufSize() // eSetAttribute
		+ sizeof (P_BASESHELL) // dwppBaseShell
		+ sizeof (short) // wSocketNumber
		+ sizeof (P_CONNECTOR); // dwpCon

	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;

	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eCanConnectOutlet, cursor);
	cursor = dwpShell.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)wSocketNum, cursor);
	dwpCon.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = (SMUtility::BufToInt (&a_cursor)); // convert answer
		}

	delete [] question;
	return ret;

  //## end BaseShellQuestion::CanConnectOutlet%890428262.body
}

//## Operation: GetInletConnector%557037002; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	socket_number
//	index
P_CONNECTOR BaseShellQuestion::GetInletConnector (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum, unsigned int Index)
{
  //## begin BaseShellQuestion::GetInletConnector%557037002.body preserve=yes
	P_CONNECTOR ret;	
	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short) //socketNum
		+ sizeof (short); // index
	const unsigned answer_size = sizeof (P_CONNECTOR);
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [answer_size];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetInletConnector, cursor);
	cursor = dwpShell.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)wSocketNum, cursor);
	SMUtility::IntToBuf((short)Index, cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = P_CONNECTOR (&a_cursor);
		}
	delete [] question;
	return ret;

  //## end BaseShellQuestion::GetInletConnector%557037002.body
}

//## Operation: GetOutletConnector%1073042389; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	socket_number
//	index
P_CONNECTOR BaseShellQuestion::GetOutletConnector (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum, unsigned int Index)
{
  //## begin BaseShellQuestion::GetOutletConnector%1073042389.body preserve=yes
	P_CONNECTOR ret;	
	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short) //socketNum
		+ sizeof (short); // index
	const unsigned answer_size = sizeof (P_CONNECTOR);
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [answer_size];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetOutletConnector, cursor);
	cursor = dwpShell.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)wSocketNum, cursor);
	SMUtility::IntToBuf((short)Index, cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = P_CONNECTOR (&a_cursor);
		}
	delete [] question;
	return ret;
  //## end BaseShellQuestion::GetOutletConnector%1073042389.body
}

//## Operation: FindInletConnectorIndex%-715723704; C++
//## Postconditions:
//	Question Packed as
//
//	P_BASESHELL
//	wSocketNum
//	P_CONNECTOR
unsigned BaseShellQuestion::FindInletConnectorIndex (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned wSocketNum, P_CONNECTOR dwpCon)
{
  //## begin BaseShellQuestion::FindInletConnectorIndex%-715723704.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() 
		+ sizeof (P_BASESHELL) // dwpShell
		+ sizeof (short) // wSocketNum
		+ sizeof (P_CONNECTOR); // dwpCon
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eFindInletConnectorIndex, cursor);
	cursor = dwpShell.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)wSocketNum, cursor);
	dwpCon.toBuf (cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;
  //## end BaseShellQuestion::FindInletConnectorIndex%-715723704.body
}

//## Operation: FindOutletConnectorIndex%-1415674172; C++
//## Postconditions:
//	Question Packed as
//
//	P_BASESHELL
//	wSocketNum
//	P_CONNECTOR
unsigned BaseShellQuestion::FindOutletConnectorIndex (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned int wSocketNum, P_CONNECTOR dwpCon)
{
  //## begin BaseShellQuestion::FindOutletConnectorIndex%-1415674172.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() 
		+ sizeof (P_BASESHELL) // dwpShell
		+ sizeof (short) // wSocketNum
		+ sizeof (P_CONNECTOR); // dwpCon
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eFindOutletConnectorIndex, cursor);
	cursor = dwpShell.toBuf(cursor);
	cursor = SMUtility::IntToBuf((short)wSocketNum, cursor);
	dwpCon.toBuf (cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;
  //## end BaseShellQuestion::FindOutletConnectorIndex%-1415674172.body
}

//## Operation: SwapOutletConnector%251269562; C++
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	outlet_number
//	connector1_index
//	connector2_index
void BaseShellQuestion::SwapOutletConnector (PresentationQuestion* pQuestion, P_BASESHELL dwpShell, unsigned outlet_number, unsigned connector1_index, unsigned connector2_index)
{
  //## begin BaseShellQuestion::SwapOutletConnector%251269562.body preserve=yes
	const unsigned question_size = SMUtility::TargetFuncBufSize() // eSetAttribute 
		+ sizeof (P_BASESHELL) // pBaseShell
		+ sizeof (short) * 3; // outlet_number, connector1_index, & connector2_index
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eSwapOutletConnector, cursor);
	cursor = dwpShell.toBuf(cursor);
	cursor = SMUtility::IntToBuf ((short)outlet_number, cursor);
	cursor = SMUtility::IntToBuf ((short)connector1_index, cursor);
	SMUtility::IntToBuf ((short)connector2_index, cursor);

	pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, NULL, 0);
	delete [] question;


  //## end BaseShellQuestion::SwapOutletConnector%251269562.body
}

//## Operation: GetNumObjectTypes%1048126423
//	Gets the number of attributes for the P_BASESHELL
//	parameter.  The  Number of Attributes is returned as
//	parameter
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
unsigned BaseShellQuestion::GetNumObjectTypes (PresentationQuestion* pQuestion)
{
  //## begin BaseShellQuestion::GetNumObjectTypes%1048126423.body preserve=yes
	unsigned ret = 0;

	const unsigned question_size =  SMUtility::TargetFuncBufSize(); // eGGetNumObjectTypes

	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetNumObjectTypes, cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return ret;

  //## end BaseShellQuestion::GetNumObjectTypes%1048126423.body
}

//## Operation: GetObjectType%1048126424
//	Gets the name of the Object type defined by index
//	parameters.  The  Objectname is returned as parameters
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
void BaseShellQuestion::GetObjectType (PresentationQuestion* pQuestion, unsigned index, char* ret_value, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetObjectType%1048126424.body preserve=yes
	const unsigned question_size =  SMUtility::TargetFuncBufSize() // Target Function index
		+ sizeof (short); // attribute key

	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE* answer  = (BYTE*) ret_value;

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eGetObjectType, cursor);
	SMUtility::IntToBuf((short)index, cursor);


	//get the answer
	if(!pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, buf_len))
		{
			// it failed
			ret_value [0] = '\0';
		}
	delete [] question;

  //## end BaseShellQuestion::GetObjectType%1048126424.body
}

//## Operation: CanHaveChildren%1048130624; C++
//	Returns true if The Object Type can have children
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
bool BaseShellQuestion::CanHaveChildren (PresentationQuestion* pQuestion, P_BASESHELL dwpShell)
{
  //## begin BaseShellQuestion::CanHaveChildren%1048130624.body preserve=yes
	bool ret = false;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL); // dwpShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eCanHaveChildren, cursor);
	dwpShell.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return (ret);

  //## end BaseShellQuestion::CanHaveChildren%1048130624.body
}

//## Operation: CanChangeSize%1048130625; C++
//	Returns true if The Object Type can change the number of
//	Inlets or Outlets it has
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
bool BaseShellQuestion::CanChangeSize (PresentationQuestion* pQuestion, P_BASESHELL dwpShell)
{
  //## begin BaseShellQuestion::CanChangeSize%1048130625.body preserve=yes
	bool ret = false;

	const unsigned question_size =  SMUtility::TargetFuncBufSize() // eGetNumAttributes
		+ sizeof (P_BASESHELL); // dwpShell
	
	BYTE* question = new BYTE [question_size];
	BYTE* cursor = question;
	BYTE answer [sizeof(short)];

	// fill question
	cursor = SMUtility::TargetFuncToBuf (BaseShellAnswer::eCanChangeSize, cursor);
	dwpShell.toBuf(cursor);

	//get the answer
	if(pQuestion->AskQuestion (PresentationAnswer::eBaseShell, question, question_size, answer, sizeof(answer)))
		{
			const BYTE* a_cursor = answer;
			ret = SMUtility::BufToInt (&a_cursor); // convert answer
		}
	delete [] question;
	return (ret);

  //## end BaseShellQuestion::CanChangeSize%1048130625.body
}

//## Operation: GetDefaultAttribute%1051589361
//	Gets the Attribute defininded by the P_BaseShell and
//	index  parameters.  The Attribute value is returned as a
//	parameter. Function returns true if the Attribute is
//	valid
//## Postconditions:
//	question buf has the parameters as follows
//	P_BASESHELL
//	attribute_key
bool BaseShellQuestion::GetDefaultAttribute (PresentationQuestion* pQuestion, P_BASESHELL objKey, char* ret_value, unsigned buf_len)
{
  //## begin BaseShellQuestion::GetDefaultAttribute%1051589361.body preserve=yes
  //## end BaseShellQuestion::GetDefaultAttribute%1051589361.body
}

// Additional Declarations
  //## begin BaseShellQuestion%3A9AC62001BA.declarations preserve=yes
  //## end BaseShellQuestion%3A9AC62001BA.declarations

//## begin module%3A9C90C202A8.epilog preserve=yes
//## end module%3A9C90C202A8.epilog
