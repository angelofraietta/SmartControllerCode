/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "simulatorinterface.h"
#include "stdafx.h"
#include "smutility.h"
#include <stdio.h>
#include <windows.h>

#include "presentationquestion.h"

//## end module%3ACAA73401AD.additionalDeclarations


/*
 * Class:     PatchEditor
 * Method:    GetCurrentInterface
 * Signature: ()I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_PatchEditor_GetCurrentInterface
  (JNIEnv *, jclass)
{
	return (jint) GetSelectedEngine ();
}

/*
 * Class:     Jni_PatchEditor
 * Method:    Initialise
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_Initialise
  (JNIEnv *, jclass)
{
	return SimulatorInitialise();
}

/*
 * Class:     Jni_PatchEditor
 * Method:    Deinitialise
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_Deinitialise
  (JNIEnv *, jclass)
{
	return SimulatorDeinitialise();
}

/*
 * Class:     Jni_PatchEditor
 * Method:    OpenMidiInputPort
 * Signature: (II)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_OpenMidiInputPort
  (JNIEnv *, jclass, jint device_num, jint index)
{
	return OpenMidiInputDevice (device_num, index);
}

/*
 * Class:     Jni_PatchEditor
 * Method:    OpenMidiOutputPort
 * Signature: (II)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_OpenMidiOutputPort
  (JNIEnv *, jclass, jint device_num, jint index)
{
	return OpenMidiOutputDevice (device_num, index);
}


/*
 * Class:     Jni_PatchEditor
 * Method:    CloseMidiOutputPorts
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_CloseMidiOutputPorts
  (JNIEnv *, jclass)
{
  CloseMidiOutputDevices();
	return true;
}


/*
 * Class:     Jni_PatchEditor
 * Method:    CloseMidiInputPorts
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_CloseMidiInputPorts
  (JNIEnv *, jclass)
{
  CloseMidiInputDevices();
	return true;
}


/*
 * Class:     Jni_PatchEditor
 * Method:    SetDefaultDirectory
 * Signature: (Ljava/lang/String;)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_SetDefaultDirectory
  (JNIEnv * env, jclass, jstring j_dir)
{
  const char* dir = env->GetStringUTFChars(j_dir, NULL);

  SetDefaultDirectory (dir);
	return true;
}


extern "C" JNIEXPORT jstring JNICALL Java_Jni_PatchEditor_GetDefaultDirectory
  (JNIEnv * env, jclass)
{
  char buf [256];
  jstring ret = 0;

  if (GetDefaultDirectory ( buf,  sizeof(buf)))
  {
    ret = env->NewStringUTF(buf);
  }

  return ret;
}

/*
 * Class:     Jni_PatchEditor
 * Method:    OpenSysexFile
 * Signature: (Ljava/lang/String;)Z
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_PatchEditor_OpenSysexFile
  (JNIEnv * env, jclass, jstring sysex_file)
{
  const char* filename = env->GetStringUTFChars(sysex_file, NULL);

  PresentationQuestion* sysex_question = new PresentationQuestion;
  if(!sysex_question->openfile(filename))
  {
    delete sysex_question;
    sysex_question = NULL;
  }
  return (jint)sysex_question;

}

/*
 * Class:     Jni_PatchEditor
 * Method:    CloseSysexFile
 * Signature: ()Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_CloseSysexFile
  (JNIEnv *, jclass, jint presentation)
{
  bool ret = false;
  PresentationQuestion* pQuestion = (PresentationQuestion*) presentation;

  if (pQuestion)
  {
    delete pQuestion;
    ret = true;
  }

  return ret;
}

/*
 * Class:     Jni_PatchEditor
 * Method:    SendSysexFile
 * Signature: (Ljava/lang/String;I)Z
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_PatchEditor_PrepareTxSysexFile
  (JNIEnv * env, jclass, jstring sysex_file)
{
  const char* filename = env->GetStringUTFChars(sysex_file, NULL);

  return OpenSysexSendFile (filename);
}


extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_TxSysexData
  (JNIEnv * , jclass, jint key, jint midi_port, jint num_bytes)
{

  return TransmitSysexData (key, midi_port, num_bytes);
}

extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_CloseTxSysexFile
  (JNIEnv * , jclass, jint key)
{

  return CloseSysexData (key);
}

extern "C" JNIEXPORT jint JNICALL Java_Jni_PatchEditor_NumMidiOut
  (JNIEnv *, jclass)
{
    return GetNumMidiOutDevices();
}

/*
 * Class:     Jni_PatchEditor
 * Method:    NumMidiIn
 * Signature: ()I
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_PatchEditor_NumMidiIn
  (JNIEnv *, jclass)
{
  printf ("Java_Jni_PatchEditor_NumMidiIn\r\n");
  return GetNumMidiInDevices();
}

/*
 * Class:     Jni_PatchEditor
 * Method:    MidOutName
 * Signature: (I)Ljava/lang/String;
 */
extern "C" JNIEXPORT jstring JNICALL Java_Jni_PatchEditor_MidOutName
  (JNIEnv * env, jclass, jint index)
{
  char buf [256];
  jstring ret = 0;

  if (GetMidiOutputName (index,  buf,  sizeof(buf)))
  {
    ret = env->NewStringUTF(buf);
  }

  return ret;
}
/*
 * Class:     Jni_PatchEditor
 * Method:    MidInName
 * Signature: (I)Ljava/lang/String;
 */
extern "C" JNIEXPORT jstring JNICALL Java_Jni_PatchEditor_MidInName
  (JNIEnv * env, jclass, jint index)
{
  char buf [256];
  jstring ret = 0;

  printf ("Java_Jni_PatchEditor_MidInName %d \r\n", index);
  if (GetMidiInputName (index,  buf,  sizeof(buf)))
  {
    ret = env->NewStringUTF(buf);
  }

  return ret;
}

/*
 * Class:     PatchEditor
 * Method:    OpenInterface
 * Signature: (Ljava/lang/String;I)V
 */
extern "C" JNIEXPORT jint JNICALL Java_Jni_PatchEditor_OpenInterface
  (JNIEnv * env, jclass, jstring device_name, jint port_param)
{

  unsigned long ret = 0;

  printf ("Java_PatchEditor_OpenInterface\r\n");

  const char* port_name = env->GetStringUTFChars(device_name, NULL);

  PresentationQuestion* pQuestion = new PresentationQuestion(port_name, port_param);
  if (pQuestion->IsOpen())
  {
    ret = (unsigned long)pQuestion;
  }
  else
  {
    delete pQuestion;
  }


  return ret;
}
/*
 * Class:     PatchEditor
 * Method:    SetIntrfaceAddress
 * Signature: (ILjava/lang/String;)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_SetInterfaceAddress
  (JNIEnv *env, jclass, jint presentation_interface, jstring new_address)
{
  const char* port_name = env->GetStringUTFChars(new_address, NULL);

  PresentationQuestion* pQuestion = (PresentationQuestion*)presentation_interface;
  return pQuestion->SetInterfaceAddress(port_name);
}

extern "C" JNIEXPORT void JNICALL Java_Jni_PatchEditor_SetCurrentInterface
  (JNIEnv *, jclass, jint presentation_interface)
{
    SetCurrentEngine((PresentationQuestion*)presentation_interface);
}

/*
 * Class:     PatchEditor
 * Method:    AddAnalogueValue
 * Signature: (II)V
 */
extern "C" JNIEXPORT void JNICALL Java_Jni_PatchEditor_AddAnalogueValue
  (JNIEnv *, jclass, jint chan, jfloat val)
{
  float int_val = 1023 * val;
  AddAnalogueValue (chan, (unsigned)int_val);
}

/*
 * Class:     PatchEditor
 * Method:    AddDigitalValue
 * Signature: (IZ)V
 */
extern "C" JNIEXPORT void JNICALL Java_Jni_PatchEditor_AddDigitalValue
  (JNIEnv *, jclass, jint chan, jboolean val)
{
  AddDigitalValue (chan, val);
}

/*
 * Class:     PatchEditor
 * Method:    GetDigitalValue
 * Signature: (I)Z
 */
extern "C" JNIEXPORT jboolean JNICALL Java_Jni_PatchEditor_GetDigitalValue
  (JNIEnv *, jclass, jint chan)
{
  return GetDigitalValue(chan);
}

/*
 * Class:     PatchEditor
 * Method:    GetAnalogueValue
 * Signature: (F)I
 */
extern "C" JNIEXPORT jfloat JNICALL Java_Jni_PatchEditor_GetAnalogueValue
  (JNIEnv *, jclass, jint chan)
{
  float ret = GetAnalogueValue(chan);
  return  ret / 256;
}

