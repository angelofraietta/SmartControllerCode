CCS PCM C Compiler, Version 3.060, 12652

               Filename: C:\DEVELOP\MIDICO~2\MIDICO~1\CODE\LCD.LST

               ROM used: 295 (4%)
                         Largest free fragment is 2048
               RAM used: 13 (7%) at main() level
                         23 (13%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   108
0003:  NOP
....................  /******************************************************************************* 
.................... *	Author: Angelo Fraietta 
.................... *	Description: General Purpose Midi controller 
.................... *	Processor PIC16F877 
.................... *	Specifications: 
.................... *		16 Digital input to Midi Output (SPI) 
.................... *		16 Analogue input to Midi Output (ADC) 
.................... *		Midi input to Midi output merge (UART) 
.................... *   Midi input to 16 Analogue ouput (I2C) 
.................... * 
.................... *******************************************************************************/ 
....................  
.................... #include "16f877.h" 
....................  //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
.................... 
....................  
.................... #include "../../mididriver/midiflags.h" 
....................  /************************************************************* 
.................... Module contains Flags used for using 16 bit word as bitmask 
....................  
.................... Tx and RX are respective to the Smart Controller CPU device 
.................... The Midi IO board, therefore would treat it's tx as RX 
.................... *************************************************************/ 
....................  
.................... #define TX_DATA_MASK    0x8000 
.................... #define DATA_TYPE_MASK   0x7000 
.................... #define DATA_PARAMS_MASK 0x0F00 
.................... #define DATA_VALUE_MASK  0x00FF 
....................  
.................... // define the diagnostic messages 
....................  
.................... #define DIAG_DIAG_MESSAGE_FLAG 0xFF 
....................  
.................... #define DIAG_INVALID_RX_DATA 0xFFFF //this means this message is bad 
.................... #define DIAG_MESSAGE_MASK 0xFF00 // we are checking the first byte 
.................... #define DIAG_RE_TRANSMIT_LAST_MESSAGE 0xFF00 // We are requesting the last message be re-sent 
.................... #define DIAG_ETX 0xFF01 // This is the End of our transmission. Pic Requires a response 
.................... #define DIAG_ECHO 0xFF02 // Same Data is returned. Initiated by PIC 
.................... #define DIAG_RESET 0xFF03 // Reset. Sent by 386 upon device driver startup 
.................... #define DIAG_ASYNC_MESSAGE_READY 0xFF04 // 386 has a message ready, transmitted asynchronously from 386. 
.................... #define DIAG_SYNC_MESSAGE_READY 0xFF05 // 386 has a message ready, transmitted within context of ISR from 386.   
.................... #define DIAG_RECEIVE_RESPONSE  0xFF06 // 386 has received PICS message but has no data. Response still required 
.................... #define DIAG_REQUEST_RX_BYTES  0xFF07 // requesting the number of Data bytes received be returned 
.................... #define DIAG_REQUEST_TX_BYTES  0xFF08 // requesting the number of Data bytes transmitted be returned 
.................... #define DIAG_INCOMPLETE_PLA    0xFF09 // this is what the Pla will give out if it has not been loded properly 
.................... // Synchronisation returns have the number as the last nibble. Value is therefore 0 to F 
.................... #define DIAG_RETURN_RX_BYTES   0xFFE0 
.................... #define DIAG_RETURN_TX_BYTES   0xFFD0 
.................... #define DIAG_TEST_RETURN_BYTES_MASK 0xFFF0 // AND with Diag message to determine whether it is a synch mask 
.................... #define DIAG_RETURN_BYTES_MASK 0x0001 // AND with Message to read the number of bytes. Only test 1 and zero 
....................  
.................... #define SYSEX_START_STATUS 0xF0 
.................... #define SYSEX_END_STATUS 	 0xF7 
.................... 	 
.................... /************************************************* 
.................... 16 bit Message Consists of following Bits 
....................  
.................... T  DDD CCCC DATABYTE 
....................  
.................... T = Transmit Data - 1 bit 
.................... DDD = Data Types - 3 bits (listed below). Up to a maximum of 7 
.................... CCCC = Channel - 4 bits (16 channels) 
.................... DATABYTE = Message Data Value - 8 bits 
....................  
.................... Note that DDDCCCC that equals 7F is a diag message 
.................... **************************************************/ 
.................... #define TX_DATA_FLAG      0x80 
....................  
.................... // define four Data Types. Last three bits of first byte. Remaining  
.................... #define MIDI_CHAN_1_DATA  0x00 
.................... #define MIDI_CHAN_2_DATA  0x10 
.................... #define ANALOG_DATA       0x20 
.................... #define DIGITAL_DATA      0x30 
....................   
....................  
....................  
....................  
....................  
.................... 
....................  
.................... #define IOCARD_BUILD 
....................  
.................... #device adc=8 
.................... #fuses HS, WDT, BROWNOUT, PUT, NOLVP, PROTECT 
....................  
.................... //#define _SIMULATE 
....................  
....................  
.................... // define pins for SPI input reads and output writes 
.................... #define SPI_IN_LATCH      PIN_C2 
.................... #define SPI_CLOCK         PIN_C3 
....................  
.................... #define SPI_DATA_OUT      PIN_D1 
.................... #define DIGITAL_OUT_LATCH PIN_D2 
.................... #define DIGITAL_IN_DATA   PIN_C4 
.................... #define LCD_CLK           SPI_CLOCK          
.................... #define LCD_DATA          SPI_DATA_OUT 
.................... #define LCD_ENABLE        PIN_D0 
....................    
.................... // define PLA Pins 
.................... #define PLA_CLK                 PIN_D5 
.................... #define SPI_PLA_DATA_OUT        PIN_D4 
.................... #define SPI_PLA_DATA_IN         PIN_D6 
....................  
.................... //#define SPI_PLA_DATA          PIN_D4 
.................... #define SPI_PLA_DATA_DIR        PIN_D3 
....................  
.................... #define CYCLE_COUNT 2 
....................  
.................... // set the following define to Do a count test 
.................... //#define DIAG_COUNT 
....................  
....................  
.................... #ifdef _SIMULATE 
.................... #define _NO_DELAY 
.................... #else 
.................... #define _USE_PRINTF 
.................... #endif 
....................  
.................... #define NUM_ANALOGUE_OUT 8 
.................... #define NUM_DIGITAL_OUT 16 
....................  
....................  
.................... #use delay(clock=20000000) 
*
0014:  MOVLW  2C
0015:  MOVWF  04
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   026
0019:  MOVLW  06
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  7B
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 00,F
0025:  GOTO   019
0026:  RETLW  00
....................  
.................... #define MIDIOUT_1_PIN PIN_C6 
.................... #define MIDIOUT_2_PIN PIN_C5 
.................... #define MIDI_IN_PIN PIN_C7 
....................  
.................... #define WATCHDOG_OVERFLOW_COUNT   255 
.................... #define WATCHDOG_NORMAL_COUNT     5000L 
.................... #define NUM_MAX_OVERFLOW_BLINK        10 
.................... #define MAX_RESENDS               2 
....................  
.................... #define NUM_ANALOGUE_IN_BANKS 2 
.................... #define NUM_ANALOGUE_IN_SUB_BANKS 8 
.................... #define NUM_ANALOGUE_IN_CHANS (NUM_ANALOGUE_IN_BANKS * NUM_ANALOGUE_IN_SUB_BANKS) 
.................... #define AD_READ_DELAY 20 // num us to delay from setting channel to making read 
.................... #define AD_SWITCH_DELAY 1 // num us to wait between switching analog switch to reading 
.................... #define NUM_ANALOG_VALID_READS 2 // must be this many identical reads to be a valid input 
....................  
.................... //#define SEVEN_BIT_AD 
....................  
.................... #ifdef SEVEN_BIT_AD 
.................... #define DIG_ON_VAL 0x7f 
.................... #else 
.................... #define DIG_ON_VAL 0xff 
.................... #endif 
....................  
.................... #byte PORTA = 5 
.................... #byte PORTB = 6 
.................... #byte PORTC = 7 
....................  
....................  
.................... #use rs232(baud=31250, xmit=MIDIOUT_1_PIN, rcv=MIDI_IN_PIN, ERRORS)  
....................  
.................... #USE I2C(master, sda=PIN_B7, scl=PIN_B6) 
....................  
....................  
.................... #define IO_INTERUPT_OUT_PIN1 PIN_E1 
.................... //#define IO_INTERUPT_OUT_PIN2 PIN_E2 
.................... //#define IO_INTERUPT_OUT_PIN3 PIN_E0 
....................  
.................... typedef struct 
.................... { 
....................   byte flags; 
....................   byte data; 
.................... } str_PLA_Data; 
....................  
....................  
.................... short resync_required = true; 
.................... int num_overflow_blinks = 0; 
.................... int16 quiet_cycles = 0; // the number of cycles where we have heard nothing 
....................  
.................... const byte LCD_INIT_TEXT [] = {'H', 'E', 'L', 'L', 'O'}; 
*
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  48
0009:  RETLW  45
000A:  RETLW  4C
000B:  RETLW  4C
000C:  RETLW  4F
....................  
.................... void MessageRead() 
.................... { 
....................   resync_required = false; 
.................... } 
....................  
.................... #include "watchdog.h" 
....................   
.................... #define NUM_WD_FLASHES	8 
....................  
.................... //#ifndef WATCHDOG_PIN 
.................... #define WATCHDOG_PIN	PIN_C0 
.................... //#endif 
....................  
.................... void FlashWatchdog(int16 ms_time) 
.................... { 
.................... 		output_high (WATCHDOG_PIN); 
*
0066:  BCF    25.0
0067:  MOVF   25,W
0068:  BSF    03.5
0069:  MOVWF  07
006A:  BCF    03.5
006B:  BSF    07.0
.................... 		restart_wdt(); 
006C:  CLRWDT
.................... #ifndef _SIMULATE 
.................... 		delay_ms (ms_time); 
006D:  MOVF   2A,W
006E:  MOVWF  2C
006F:  CALL   014
.................... #endif 
.................... 		restart_wdt(); 
0070:  CLRWDT
.................... 		output_low (WATCHDOG_PIN); 
0071:  BCF    25.0
0072:  MOVF   25,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BCF    07.0
.................... #ifndef _SIMULATE 
.................... 		delay_ms (ms_time); 
0077:  MOVF   2A,W
0078:  MOVWF  2C
0079:  CALL   014
.................... #endif 
.................... 		restart_wdt(); 
007A:  CLRWDT
.................... } 
....................  
.................... void SetWatchdogLed (short value) 
.................... { 
.................... 	output_bit (WATCHDOG_PIN, value); 
*
00F2:  MOVF   2B,F
00F3:  BTFSS  03.2
00F4:  GOTO   0F7
00F5:  BCF    07.0
00F6:  GOTO   0F8
00F7:  BSF    07.0
00F8:  BCF    25.0
00F9:  MOVF   25,W
00FA:  BSF    03.5
00FB:  MOVWF  07
00FC:  BCF    03.5
.................... } 
....................  
.................... void InitialiseWatchdog() 
.................... { 
.................... 	int i; 
.................... 	for (i = 0; i < NUM_WD_FLASHES; i++) 
*
005E:  CLRF   29
005F:  MOVF   29,W
0060:  SUBLW  07
0061:  BTFSS  03.0
0062:  GOTO   07E
.................... 		{ 
.................... 			FlashWatchdog(100); 
0063:  CLRF   2B
0064:  MOVLW  64
0065:  MOVWF  2A
.................... 			restart_wdt(); 
*
007B:  CLRWDT
.................... 		} 
007C:  INCF   29,F
007D:  GOTO   05F
.................... } 
....................  
.................... 
.................... #include "lcd.h" 
....................  //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                  //// 
.................... ////                 Driver for common LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // This code Modified by Angelo Fraietta for use as a 3 wire interface 
.................... // using a 16 x 2 LCD 
....................  
.................... // The following Pins must be defined 
.................... // LCD_CLK 
.................... // LCD_DATA 
.................... // LCD_ENABLE 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
.................... const byte LCD_INIT_STRING [] = {0x38, 0x01, 0x0C};  
*
000D:  BCF    0A.0
000E:  BCF    0A.1
000F:  BCF    0A.2
0010:  ADDWF  02,F
0011:  RETLW  38
0012:  RETLW  01
0013:  RETLW  0C
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
....................  
.................... // sends data to LCD. If data_type is True, then is a data byte, otherwise is a command byte 
.................... void lcd_send_byte(byte out_byte, short data_type)  
.................... { 
.................... 	int byte_num; 
.................... 	// prepare clock and enable 
.................... 	output_low (LCD_CLK); 
*
0027:  BCF    25.3
0028:  MOVF   25,W
0029:  BSF    03.5
002A:  MOVWF  07
002B:  BCF    03.5
002C:  BCF    07.3
.................... 	output_high (LCD_ENABLE); 
002D:  BSF    03.5
002E:  BCF    08.0
002F:  BCF    03.5
0030:  BSF    08.0
....................  
.................... 	for (byte_num = 0; byte_num < 8; byte_num++) 
0031:  CLRF   31
0032:  MOVF   31,W
0033:  SUBLW  07
0034:  BTFSS  03.0
0035:  GOTO   04E
.................... 		{	 
.................... 			// write the high bit 
.................... 			output_bit (LCD_DATA, bit_test (out_byte, 7)); 
0036:  BTFSC  2F.7
0037:  GOTO   03A
0038:  BCF    08.1
0039:  GOTO   03B
003A:  BSF    08.1
003B:  BSF    03.5
003C:  BCF    08.1
.................... 			out_byte<<=1; 
003D:  BCF    03.0
003E:  BCF    03.5
003F:  RLF    2F,F
....................  
.................... 			// now clock register 
.................... 			output_high (LCD_CLK); 
0040:  BCF    25.3
0041:  MOVF   25,W
0042:  BSF    03.5
0043:  MOVWF  07
0044:  BCF    03.5
0045:  BSF    07.3
.................... 			output_low (LCD_CLK); 
0046:  BCF    25.3
0047:  MOVF   25,W
0048:  BSF    03.5
0049:  MOVWF  07
004A:  BCF    03.5
004B:  BCF    07.3
.................... 		} 
004C:  INCF   31,F
004D:  GOTO   032
....................  
.................... 	// now output the RS bit (do not clock) 
.................... 	output_bit (LCD_DATA,data_type); 
004E:  MOVF   30,F
004F:  BTFSS  03.2
0050:  GOTO   053
0051:  BCF    08.1
0052:  GOTO   054
0053:  BSF    08.1
0054:  BSF    03.5
0055:  BCF    08.1
....................   	 
....................   output_low (LCD_ENABLE); 
0056:  BCF    08.0
0057:  BCF    03.5
0058:  BCF    08.0
0059:  RETLW  00
.................... } 
....................  
....................  
.................... void lcd_init()  
.................... { 
.................... 	byte i; 
....................   byte j; 
....................  
.................... 	delay_ms(25); 
*
007E:  MOVLW  19
007F:  MOVWF  2C
0080:  CALL   014
....................    
....................   for (j = 0; j < 3; j++) 
0081:  CLRF   2A
0082:  MOVF   2A,W
0083:  SUBLW  02
0084:  BTFSS  03.0
0085:  GOTO   08F
....................     { 
....................     lcd_send_byte(0x38, false); 
0086:  MOVLW  38
0087:  MOVWF  2F
0088:  CLRF   30
0089:  CALL   027
....................     delay_ms(2); 
008A:  MOVLW  02
008B:  MOVWF  2C
008C:  CALL   014
....................     } 
008D:  INCF   2A,F
008E:  GOTO   082
....................  
.................... 	for(i = 0; i< sizeof(LCD_INIT_STRING); i++) 
008F:  CLRF   29
0090:  MOVF   29,W
0091:  SUBLW  02
0092:  BTFSS  03.0
0093:  GOTO   09F
.................... 		{ 
.................... 			lcd_send_byte(LCD_INIT_STRING[i], false); 
0094:  MOVF   29,W
0095:  CALL   00D
0096:  MOVWF  2B
0097:  MOVWF  2F
0098:  CLRF   30
0099:  CALL   027
....................       delay_ms(2); 
009A:  MOVLW  02
009B:  MOVWF  2C
009C:  CALL   014
.................... 		} 
009D:  INCF   29,F
009E:  GOTO   090
.................... } 
....................  
....................  
.................... void lcd_gotoxy( byte x, byte y) { 
....................    byte address; 
....................  
....................    if(y!=1) 
*
00C3:  DECFSZ 2C,W
00C4:  GOTO   0C6
00C5:  GOTO   0C9
....................      address=lcd_line_two; 
00C6:  MOVLW  40
00C7:  MOVWF  2D
....................    else 
00C8:  GOTO   0CA
....................      address=0; 
00C9:  CLRF   2D
....................    address+=x-1; 
00CA:  MOVLW  01
00CB:  SUBWF  2B,W
00CC:  ADDWF  2D,F
....................    lcd_send_byte(0x80|address, false); 
00CD:  MOVF   2D,W
00CE:  IORLW  80
00CF:  MOVWF  2E
00D0:  MOVWF  2F
00D1:  CLRF   30
00D2:  CALL   027
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c)  
*
00A8:  MOVF   2A,W
00A9:  MOVWF  77
00AA:  MOVLW  0C
00AB:  SUBWF  77,W
00AC:  BTFSC  03.2
00AD:  GOTO   0B7
00AE:  MOVLW  0A
00AF:  SUBWF  77,W
00B0:  BTFSC  03.2
00B1:  GOTO   0BF
00B2:  MOVLW  08
00B3:  SUBWF  77,W
00B4:  BTFSC  03.2
00B5:  GOTO   0D4
00B6:  GOTO   0D9
.................... 		 { 
.................... 		 case '\f':  
.................... 			 lcd_send_byte(1, false); 
00B7:  MOVLW  01
00B8:  MOVWF  2F
00B9:  CLRF   30
00BA:  CALL   027
.................... 			 delay_ms(2); 
00BB:  MOVLW  02
00BC:  MOVWF  2C
00BD:  CALL   014
.................... 			 break; 
00BE:  GOTO   0DF
.................... 			  
.................... 		 case '\n':  
.................... 			 lcd_gotoxy(1,2);         
00BF:  MOVLW  01
00C0:  MOVWF  2B
00C1:  MOVLW  02
00C2:  MOVWF  2C
.................... 			 break; 
*
00D3:  GOTO   0DF
....................  
....................      case '\b':  
.................... 			 lcd_send_byte(0x10, false);   
00D4:  MOVLW  10
00D5:  MOVWF  2F
00D6:  CLRF   30
00D7:  CALL   027
.................... 			 break; 
00D8:  GOTO   0DF
....................  
....................      default:  
.................... 			 lcd_send_byte(c, true);      
00D9:  MOVF   2A,W
00DA:  MOVWF  2F
00DB:  MOVLW  01
00DC:  MOVWF  30
00DD:  CALL   027
.................... 			 break; 
00DE:  GOTO   0DF
....................    } 
.................... } 
....................  
....................  
.................... 
.................... // LED timers 
.................... int16 watchdog_flash_count = 0; // when becomes zero, changes state of LED 
.................... short watchdog_led = 0; 
.................... short overflow_val = 0; 
....................  
....................  
.................... void BlinkWatchdog() 
.................... { 
....................   str_PLA_Data pla_data; 
....................  
....................   if (!watchdog_flash_count) 
*
00E7:  MOVF   26,W
00E8:  IORWF  27,W
00E9:  BTFSS  03.2
00EA:  GOTO   101
....................     { 
....................     watchdog_led = ~watchdog_led; 
00EB:  MOVLW  02
00EC:  XORWF  21,F
....................     SetWatchdogLed (watchdog_led); 
00ED:  MOVLW  00
00EE:  BTFSC  21.1
00EF:  MOVLW  01
00F0:  MOVWF  2A
00F1:  MOVWF  2B
....................     watchdog_flash_count = WATCHDOG_NORMAL_COUNT; 
*
00FD:  MOVLW  13
00FE:  MOVWF  27
00FF:  MOVLW  88
0100:  MOVWF  26
....................  
....................     } 
....................  
....................   watchdog_flash_count--; 
0101:  MOVF   26,W
0102:  BTFSC  03.2
0103:  DECF   27,F
0104:  DECF   26,F
0105:  BCF    0A.3
0106:  BCF    0A.4
0107:  GOTO   125 (RETURN)
....................  
.................... } 
....................  
....................  
.................... void ResetController () 
.................... { 
....................  
....................   int i; 
....................   disable_interrupts(GLOBAL); 
*
005A:  BCF    0B.6
005B:  BCF    0B.7
005C:  BTFSC  0B.7
005D:  GOTO   05B
....................  
....................  
.................... #ifndef _SIMULATE 
....................   InitialiseWatchdog(); 
.................... #endif 
....................  
....................  
....................   lcd_init(); 
....................  
....................   for (i = 0; i < sizeof(LCD_INIT_TEXT); i++) 
*
009F:  CLRF   28
00A0:  MOVF   28,W
00A1:  SUBLW  04
00A2:  BTFSS  03.0
00A3:  GOTO   0E4
....................   { 
.................... 	  lcd_putc(LCD_INIT_TEXT[i]); 
00A4:  MOVF   28,W
00A5:  CALL   004
00A6:  MOVWF  29
00A7:  MOVWF  2A
....................     delay_ms (2); 
*
00DF:  MOVLW  02
00E0:  MOVWF  2C
00E1:  CALL   014
....................   } 
00E2:  INCF   28,F
00E3:  GOTO   0A0
00E4:  BCF    0A.3
00E5:  BCF    0A.4
00E6:  GOTO   123 (RETURN)
.................... } 
....................  
....................  
.................... main() { 
*
0108:  CLRF   04
0109:  MOVLW  1F
010A:  ANDWF  03,F
010B:  MOVLW  9F
010C:  MOVWF  04
010D:  MOVLW  07
010E:  MOVWF  00
010F:  CLRF   20
0110:  MOVLW  09
0111:  BSF    03.5
0112:  MOVWF  19
0113:  MOVLW  22
0114:  MOVWF  18
0115:  MOVLW  90
0116:  BCF    03.5
0117:  MOVWF  18
0118:  BSF    21.0
0119:  CLRF   22
011A:  CLRF   23
011B:  CLRF   24
011C:  MOVLW  FF
011D:  MOVWF  25
011E:  CLRF   26
011F:  CLRF   27
0120:  BCF    21.1
0121:  BCF    21.2
....................  
.................... 	ResetController (); 
0122:  GOTO   05A
....................  
....................    do { 
.................... 			restart_wdt(); 
0123:  CLRWDT
....................       BlinkWatchdog(); 
0124:  GOTO   0E7
....................  
.................... 			 
....................    } while (TRUE); 
0125:  GOTO   123
....................  
.................... } 
....................  
0126:  SLEEP
....................  
....................  
.................... 
